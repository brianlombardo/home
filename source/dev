function pro { [[ "$workspace" ]] || local workspace="$PROJECTS"
  mkdir -p "$workspace" && cd "$workspace" || return 1
  if [[ "$1" == 'clone' && "$2" ]]; then local repo="$2"; shift 2
    git clone "$repo" $@ || return 1; repo="${repo##*/}"; repo="${repo//.git/}"
    [[ -d "$repo" ]] && cd "$repo"
  else
    if [[ "$1" =~ ^[0-9a-zA-Z]+'/'[0-9a-zA-z]+$ ]]; then
      local depth=2 proj="$($awk -F/ '{print $1".*/"$2".*"}'<<<"$1")"
    else local depth=1 proj="$1"; fi
    local target="`find . -maxdepth $depth -type d | grep "$proj" | head -1`"
    if [[ ! -d "$target" ]]; then echo "$1 not found."; return 1; fi
    cd "$target"; [[ "$2" ]] && shift && $@ .
  fi
}; alias prolib='workspace="$DOTHOME/projects" pro'

function adbdev {
  if [[ "$1" ]]; then local device="`adbb ls | grep -iE "$1" | head -1`"
    if [[ "$device" ]]; then export ANDROID_SERIAL="$device"
    else echo "no matching device: $1"; fi
  fi
  echo "ANDROID_SERIAL=$ANDROID_SERIAL"
}

function pyvenv { local env="${1:-.venv}"
  if [[ ! -d "$env" ]]; then python3 -m venv "$env"; fi
  source "$env/bin/activate"
}

function gci { local message="$@"; git commit -m "$message"; }
function gp { git push origin HEAD $([[ "$1" == '-f' ]] && echo --force-with-lease --force-if-includes ||:) -u; }
alias gs='git status' gsa='gs --ignored' gup='git pull --rebase' gcia='git add -A; gci' gco='git checkout'

alias binsymbols='nm -gDC'
alias fastbroot='sudo "$ANDROID_HOME/platform-tools/fastboot"'
alias virtinit='pkg i virt-manager && sudo usermod -aG libvirt $USER'
alias rad='./gradlew'
alias mockitoinit='cd ./test && mkdir -p ./resources/mockito-extensions && echo 'mock-maker-inline' > ./resources/mockito-extensions/org.mockito.plugins.MockMaker'
alias emu='adbb emu'
alias json='python3 -m json.tool'
alias jsonprint='json | bat --language javascript'

alias rustupup="curl --proto '=https' --tlsv1.2 -sSf 'https://sh.rustup.rs' | sh;"
alias sdkmanup='curl -s "https://get.sdkman.io" | bash;'

alias nvmup='curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash;'
if [[ -d "$HOME/.nvm" ]]; then
  export NVM_DIR="$HOME/.nvm"
  [[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"
  [[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"
fi
export NODE_PATH="`type npm &>/dev/null && npm root -g ||:`"

alias pythonup='curl -fsSL https://pyenv.run | bash'
if [[ -d "$HOME/.pyenv" ]]; then
  export PYENV_ROOT="$HOME/.pyenv"
  include "$PYENV_ROOT/bin"
  eval "$(pyenv init - bash)"
  eval "$(pyenv virtualenv-init -)"
fi

alias flutterup='surely "install flutter ${flutter_version:-stable}" && cd && \
  rm -fr .pub-cache .flutter .flutter-devtools .dart .dartServer "$HOMELIB/flutter" && \
  cd "$HOMELIB" && git clone https://github.com/flutter/flutter.git && cd flutter && \
  git checkout "${flutter_version:-stable}" && bin/flutter doctor'
alias fpg='flutter pub get;'
alias fpup='flutter pub upgrade;'
alias ftest='flutter test;'

alias mul='clac mul' add='clac add' sub='clac sub' div='clac div' avg='clac avg'
